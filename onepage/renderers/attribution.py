"""Attribution file generator for CC BY-SA compliance."""

from typing import Dict, List, Set, Any
from datetime import datetime
import json

from ..core.models import IntermediateRepresentation, Claim


class AttributionGenerator:
    """Generates attribution files for CC BY-SA compliance."""
    
    def generate_attribution_markdown(self, ir: IntermediateRepresentation) -> str:
        """
        Generate ATTRIBUTION.md content.
        
        Args:
            ir: Intermediate Representation
            
        Returns:
            Markdown content for attribution file
        """
        lines = [
            "# Attribution",
            "",
            "This merged Wikipedia article contains content from multiple Wikipedia language editions.",
            "All content is available under CC BY-SA 4.0 license.",
            "",
            "## Source Articles",
            "",
        ]
        
        # Collect unique source articles
        sources = self._collect_source_articles(ir)
        
        for wiki, title, rev_id in sorted(sources):
            lang = wiki.replace("wiki", "")
            url = f"https://{lang}.wikipedia.org/wiki/{title.replace(' ', '_')}"
            rev_url = f"{url}?oldid={rev_id}"
            
            lines.extend([
                f"- **{lang}.wikipedia.org**: [{title}]({url})",
                f"  - Revision ID: [{rev_id}]({rev_url})",
                f"  - License: CC BY-SA 4.0",
                "",
            ])
        
        lines.extend([
            "## Sentence-Level Attribution",
            "",
            "The following table shows the source attribution for each sentence in the merged article:",
            "",
            "| Section | Content | Source | Revision |",
            "|---------|---------|--------|----------|",
        ])
        
        # Add sentence-level attribution
        for section in ir.sections:
            section_title = section.title.get("en", section.id) if section.title else section.id
            
            for item_id in section.items:
                if item_id in ir.content:
                    content_item = ir.content[item_id]
                    if isinstance(content_item, Claim) and content_item.provenance:
                        text_preview = content_item.text[:50] + "..." if len(content_item.text) > 50 else content_item.text
                        lines.append(
                            f"| {section_title} | {text_preview} | {content_item.provenance.wiki} | {content_item.provenance.rev_id} |"
                        )
        
        lines.extend([
            "",
            "## License Information",
            "",
            "This work is licensed under CC BY-SA 4.0. You are free to:",
            "",
            "- **Share** — copy and redistribute the material in any medium or format",
            "- **Adapt** — remix, transform, and build upon the material",
            "",
            "Under the following terms:",
            "",
            "- **Attribution** — You must give appropriate credit, provide a link to the license, and indicate if changes were made",
            "- **ShareAlike** — If you remix, transform, or build upon the material, you must distribute your contributions under the same license",
            "",
            f"Generated by onepage on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        ])
        
        return "\n".join(lines)
    
    def generate_attribution_json(self, ir: IntermediateRepresentation) -> str:
        """
        Generate machine-readable attribution data as JSON.
        
        Args:
            ir: Intermediate Representation
            
        Returns:
            JSON string with attribution data
        """
        attribution_data = {
            "entity": {
                "qid": ir.entity.qid,
                "labels": ir.entity.labels,
            },
            "license": "CC BY-SA 4.0",
            "generated_at": datetime.now().isoformat(),
            "source_articles": [],
            "sentence_attribution": [],
        }
        
        # Collect source articles
        sources = self._collect_source_articles(ir)
        for wiki, title, rev_id in sources:
            lang = wiki.replace("wiki", "")
            attribution_data["source_articles"].append({
                "language": lang,
                "wiki": wiki,
                "title": title,
                "revision_id": rev_id,
                "url": f"https://{lang}.wikipedia.org/wiki/{title.replace(' ', '_')}",
                "revision_url": f"https://{lang}.wikipedia.org/wiki/{title.replace(' ', '_')}?oldid={rev_id}",
                "license": "CC BY-SA 4.0",
            })
        
        # Add sentence-level attribution
        for section in ir.sections:
            for item_id in section.items:
                if item_id in ir.content:
                    content_item = ir.content[item_id]
                    if isinstance(content_item, Claim) and content_item.provenance:
                        attribution_data["sentence_attribution"].append({
                            "content_id": item_id,
                            "section_id": section.id,
                            "text": content_item.text,
                            "language": content_item.lang,
                            "source_wiki": content_item.provenance.wiki,
                            "source_title": content_item.provenance.title,
                            "source_revision": content_item.provenance.rev_id,
                        })
        
        return json.dumps(attribution_data, indent=2, ensure_ascii=False)
    
    def _collect_source_articles(self, ir: IntermediateRepresentation) -> Set[tuple]:
        """Collect unique source articles from the IR."""
        sources = set()
        
        for content_id, content_item in ir.content.items():
            if isinstance(content_item, Claim) and content_item.provenance:
                sources.add((
                    content_item.provenance.wiki,
                    content_item.provenance.title,
                    content_item.provenance.rev_id,
                ))
        
        return sources
    
    def generate_contribution_stats(self, ir: IntermediateRepresentation) -> Dict[str, Any]:
        """
        Generate statistics about contributions from each language.
        
        Args:
            ir: Intermediate Representation
            
        Returns:
            Dictionary with contribution statistics
        """
        stats = {
            "total_content_items": len(ir.content),
            "by_language": {},
            "by_section": {},
        }
        
        # Count by language
        for content_id, content_item in ir.content.items():
            if isinstance(content_item, Claim):
                lang = content_item.lang
                if lang not in stats["by_language"]:
                    stats["by_language"][lang] = {"claims": 0, "sentences": 0}
                
                stats["by_language"][lang]["claims"] += 1
                stats["by_language"][lang]["sentences"] += 1
        
        # Count by section
        for section in ir.sections:
            section_id = section.id
            stats["by_section"][section_id] = {
                "total_items": len(section.items),
                "claims": 0,
                "facts": 0,
            }
            
            for item_id in section.items:
                if item_id in ir.content:
                    content_item = ir.content[item_id]
                    if isinstance(content_item, Claim):
                        stats["by_section"][section_id]["claims"] += 1
                    else:
                        stats["by_section"][section_id]["facts"] += 1
        
        return stats